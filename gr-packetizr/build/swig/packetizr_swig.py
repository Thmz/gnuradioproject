# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_packetizr_swig', [dirname(__file__)])
        except ImportError:
            import _packetizr_swig
            return _packetizr_swig
        if fp is not None:
            try:
                _mod = imp.load_module('_packetizr_swig', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _packetizr_swig = swig_import_helper()
    del swig_import_helper
else:
    import _packetizr_swig
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr



def high_res_timer_now():
    """high_res_timer_now() -> gr::high_res_timer_type"""
    return _packetizr_swig.high_res_timer_now()

def high_res_timer_now_perfmon():
    """high_res_timer_now_perfmon() -> gr::high_res_timer_type"""
    return _packetizr_swig.high_res_timer_now_perfmon()

def high_res_timer_tps():
    """high_res_timer_tps() -> gr::high_res_timer_type"""
    return _packetizr_swig.high_res_timer_tps()

def high_res_timer_epoch():
    """high_res_timer_epoch() -> gr::high_res_timer_type"""
    return _packetizr_swig.high_res_timer_epoch()
class packet_encoder(object):
    """<+description of block+>"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(sps, preamble, header_constel, payload_constel, itemsize, lengthtagname):
        """
        make(unsigned int sps, std::vector< int,std::allocator< int > > const preamble, gr::digital::constellation_sptr header_constel, gr::digital::constellation_sptr payload_constel, size_t itemsize, std::string const & lengthtagname) -> packet_encoder_sptr

        Return a shared_ptr to a new instance of packetizr::packet_encoder.

        To avoid accidental use of raw pointers, packetizr::packet_encoder's constructor is in a private implementation class. packetizr::packet_encoder::make is the public interface for creating new instances.

        Params: (sps, preamble, header_constel, payload_constel, itemsize, lengthtagname)
        """
        return _packetizr_swig.packet_encoder_make(sps, preamble, header_constel, payload_constel, itemsize, lengthtagname)

    make = staticmethod(make)
    __swig_destroy__ = _packetizr_swig.delete_packet_encoder
    __del__ = lambda self: None
packet_encoder_swigregister = _packetizr_swig.packet_encoder_swigregister
packet_encoder_swigregister(packet_encoder)

def packet_encoder_make(sps, preamble, header_constel, payload_constel, itemsize, lengthtagname):
    """
    packet_encoder_make(unsigned int sps, std::vector< int,std::allocator< int > > const preamble, gr::digital::constellation_sptr header_constel, gr::digital::constellation_sptr payload_constel, size_t itemsize, std::string const & lengthtagname) -> packet_encoder_sptr

    Return a shared_ptr to a new instance of packetizr::packet_encoder.

    To avoid accidental use of raw pointers, packetizr::packet_encoder's constructor is in a private implementation class. packetizr::packet_encoder::make is the public interface for creating new instances.

    Params: (sps, preamble, header_constel, payload_constel, itemsize, lengthtagname)
    """
    return _packetizr_swig.packet_encoder_make(sps, preamble, header_constel, payload_constel, itemsize, lengthtagname)

class constellation(object):
    """Proxy of C++ gr::digital::constellation class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _packetizr_swig.delete_constellation
    __del__ = lambda self: None

    def map_to_points(self, value, points):
        """map_to_points(constellation self, unsigned int value, gr_complex * points)"""
        return _packetizr_swig.constellation_map_to_points(self, value, points)


    def map_to_points_v(self, value):
        """map_to_points_v(constellation self, unsigned int value) -> pmt_vector_cfloat"""
        return _packetizr_swig.constellation_map_to_points_v(self, value)


    def decision_maker(self, sample):
        """decision_maker(constellation self, gr_complex const * sample) -> unsigned int"""
        return _packetizr_swig.constellation_decision_maker(self, sample)


    def decision_maker_v(self, sample):
        """decision_maker_v(constellation self, pmt_vector_cfloat sample) -> unsigned int"""
        return _packetizr_swig.constellation_decision_maker_v(self, sample)


    def decision_maker_pe(self, sample, phase_error):
        """decision_maker_pe(constellation self, gr_complex const * sample, float * phase_error) -> unsigned int"""
        return _packetizr_swig.constellation_decision_maker_pe(self, sample, phase_error)


    def calc_metric(self, sample, metric, type):
        """calc_metric(constellation self, gr_complex const * sample, float * metric, gr::digital::trellis_metric_type_t type)"""
        return _packetizr_swig.constellation_calc_metric(self, sample, metric, type)


    def calc_euclidean_metric(self, sample, metric):
        """calc_euclidean_metric(constellation self, gr_complex const * sample, float * metric)"""
        return _packetizr_swig.constellation_calc_euclidean_metric(self, sample, metric)


    def calc_hard_symbol_metric(self, sample, metric):
        """calc_hard_symbol_metric(constellation self, gr_complex const * sample, float * metric)"""
        return _packetizr_swig.constellation_calc_hard_symbol_metric(self, sample, metric)


    def points(self):
        """points(constellation self) -> pmt_vector_cfloat"""
        return _packetizr_swig.constellation_points(self)


    def s_points(self):
        """s_points(constellation self) -> pmt_vector_cfloat"""
        return _packetizr_swig.constellation_s_points(self)


    def v_points(self):
        """v_points(constellation self) -> gr_vector_vector_complexf"""
        return _packetizr_swig.constellation_v_points(self)


    def apply_pre_diff_code(self):
        """apply_pre_diff_code(constellation self) -> bool"""
        return _packetizr_swig.constellation_apply_pre_diff_code(self)


    def set_pre_diff_code(self, a):
        """set_pre_diff_code(constellation self, bool a)"""
        return _packetizr_swig.constellation_set_pre_diff_code(self, a)


    def pre_diff_code(self):
        """pre_diff_code(constellation self) -> std::vector< int,std::allocator< int > >"""
        return _packetizr_swig.constellation_pre_diff_code(self)


    def rotational_symmetry(self):
        """rotational_symmetry(constellation self) -> unsigned int"""
        return _packetizr_swig.constellation_rotational_symmetry(self)


    def dimensionality(self):
        """dimensionality(constellation self) -> unsigned int"""
        return _packetizr_swig.constellation_dimensionality(self)


    def bits_per_symbol(self):
        """bits_per_symbol(constellation self) -> unsigned int"""
        return _packetizr_swig.constellation_bits_per_symbol(self)


    def arity(self):
        """arity(constellation self) -> unsigned int"""
        return _packetizr_swig.constellation_arity(self)


    def base(self):
        """base(constellation self) -> gr::digital::constellation_sptr"""
        return _packetizr_swig.constellation_base(self)


    def as_pmt(self):
        """as_pmt(constellation self) -> swig_int_ptr"""
        return _packetizr_swig.constellation_as_pmt(self)


    def gen_soft_dec_lut(self, precision, npwr=1.0):
        """gen_soft_dec_lut(constellation self, int precision, float npwr=1.0)"""
        return _packetizr_swig.constellation_gen_soft_dec_lut(self, precision, npwr)


    def calc_soft_dec(self, sample, npwr=1.0):
        """calc_soft_dec(constellation self, gr_complex sample, float npwr=1.0) -> pmt_vector_float"""
        return _packetizr_swig.constellation_calc_soft_dec(self, sample, npwr)


    def set_soft_dec_lut(self, soft_dec_lut, precision):
        """set_soft_dec_lut(constellation self, std::vector< std::vector< float,std::allocator< float > >,std::allocator< std::vector< float,std::allocator< float > > > > const & soft_dec_lut, int precision)"""
        return _packetizr_swig.constellation_set_soft_dec_lut(self, soft_dec_lut, precision)


    def has_soft_dec_lut(self):
        """has_soft_dec_lut(constellation self) -> bool"""
        return _packetizr_swig.constellation_has_soft_dec_lut(self)


    def soft_dec_lut(self):
        """soft_dec_lut(constellation self) -> std::vector< std::vector< float,std::allocator< float > >,std::allocator< std::vector< float,std::allocator< float > > > >"""
        return _packetizr_swig.constellation_soft_dec_lut(self)


    def soft_decision_maker(self, sample):
        """soft_decision_maker(constellation self, gr_complex sample) -> pmt_vector_float"""
        return _packetizr_swig.constellation_soft_decision_maker(self, sample)

constellation_swigregister = _packetizr_swig.constellation_swigregister
constellation_swigregister(constellation)

class constellation_calcdist(constellation):
    """Proxy of C++ gr::digital::constellation_calcdist class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(constell, pre_diff_code, rotational_symmetry, dimensionality):
        """make(pmt_vector_cfloat constell, std::vector< int,std::allocator< int > > pre_diff_code, unsigned int rotational_symmetry, unsigned int dimensionality) -> gr::digital::constellation_calcdist::sptr"""
        return _packetizr_swig.constellation_calcdist_make(constell, pre_diff_code, rotational_symmetry, dimensionality)

    make = staticmethod(make)
    __swig_destroy__ = _packetizr_swig.delete_constellation_calcdist
    __del__ = lambda self: None
constellation_calcdist_swigregister = _packetizr_swig.constellation_calcdist_swigregister
constellation_calcdist_swigregister(constellation_calcdist)

def constellation_calcdist_make(constell, pre_diff_code, rotational_symmetry, dimensionality):
    """constellation_calcdist_make(pmt_vector_cfloat constell, std::vector< int,std::allocator< int > > pre_diff_code, unsigned int rotational_symmetry, unsigned int dimensionality) -> gr::digital::constellation_calcdist::sptr"""
    return _packetizr_swig.constellation_calcdist_make(constell, pre_diff_code, rotational_symmetry, dimensionality)

class constellation_sector(constellation):
    """Proxy of C++ gr::digital::constellation_sector class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _packetizr_swig.delete_constellation_sector
    __del__ = lambda self: None
constellation_sector_swigregister = _packetizr_swig.constellation_sector_swigregister
constellation_sector_swigregister(constellation_sector)

class constellation_rect(constellation_sector):
    """Proxy of C++ gr::digital::constellation_rect class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(constell, pre_diff_code, rotational_symmetry, real_sectors, imag_sectors, width_real_sectors, width_imag_sectors):
        """make(pmt_vector_cfloat constell, std::vector< int,std::allocator< int > > pre_diff_code, unsigned int rotational_symmetry, unsigned int real_sectors, unsigned int imag_sectors, float width_real_sectors, float width_imag_sectors) -> gr::digital::constellation_rect::sptr"""
        return _packetizr_swig.constellation_rect_make(constell, pre_diff_code, rotational_symmetry, real_sectors, imag_sectors, width_real_sectors, width_imag_sectors)

    make = staticmethod(make)
    __swig_destroy__ = _packetizr_swig.delete_constellation_rect
    __del__ = lambda self: None
constellation_rect_swigregister = _packetizr_swig.constellation_rect_swigregister
constellation_rect_swigregister(constellation_rect)

def constellation_rect_make(constell, pre_diff_code, rotational_symmetry, real_sectors, imag_sectors, width_real_sectors, width_imag_sectors):
    """constellation_rect_make(pmt_vector_cfloat constell, std::vector< int,std::allocator< int > > pre_diff_code, unsigned int rotational_symmetry, unsigned int real_sectors, unsigned int imag_sectors, float width_real_sectors, float width_imag_sectors) -> gr::digital::constellation_rect::sptr"""
    return _packetizr_swig.constellation_rect_make(constell, pre_diff_code, rotational_symmetry, real_sectors, imag_sectors, width_real_sectors, width_imag_sectors)

class constellation_expl_rect(constellation_rect):
    """Proxy of C++ gr::digital::constellation_expl_rect class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(constellation, pre_diff_code, rotational_symmetry, real_sectors, imag_sectors, width_real_sectors, width_imag_sectors, sector_values):
        """make(pmt_vector_cfloat constellation, std::vector< int,std::allocator< int > > pre_diff_code, unsigned int rotational_symmetry, unsigned int real_sectors, unsigned int imag_sectors, float width_real_sectors, float width_imag_sectors, std::vector< unsigned int,std::allocator< unsigned int > > sector_values) -> gr::digital::constellation_expl_rect::sptr"""
        return _packetizr_swig.constellation_expl_rect_make(constellation, pre_diff_code, rotational_symmetry, real_sectors, imag_sectors, width_real_sectors, width_imag_sectors, sector_values)

    make = staticmethod(make)
    __swig_destroy__ = _packetizr_swig.delete_constellation_expl_rect
    __del__ = lambda self: None
constellation_expl_rect_swigregister = _packetizr_swig.constellation_expl_rect_swigregister
constellation_expl_rect_swigregister(constellation_expl_rect)

def constellation_expl_rect_make(constellation, pre_diff_code, rotational_symmetry, real_sectors, imag_sectors, width_real_sectors, width_imag_sectors, sector_values):
    """constellation_expl_rect_make(pmt_vector_cfloat constellation, std::vector< int,std::allocator< int > > pre_diff_code, unsigned int rotational_symmetry, unsigned int real_sectors, unsigned int imag_sectors, float width_real_sectors, float width_imag_sectors, std::vector< unsigned int,std::allocator< unsigned int > > sector_values) -> gr::digital::constellation_expl_rect::sptr"""
    return _packetizr_swig.constellation_expl_rect_make(constellation, pre_diff_code, rotational_symmetry, real_sectors, imag_sectors, width_real_sectors, width_imag_sectors, sector_values)

class constellation_psk(constellation_sector):
    """Proxy of C++ gr::digital::constellation_psk class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(constell, pre_diff_code, n_sectors):
        """make(pmt_vector_cfloat constell, std::vector< int,std::allocator< int > > pre_diff_code, unsigned int n_sectors) -> gr::digital::constellation_psk::sptr"""
        return _packetizr_swig.constellation_psk_make(constell, pre_diff_code, n_sectors)

    make = staticmethod(make)
    __swig_destroy__ = _packetizr_swig.delete_constellation_psk
    __del__ = lambda self: None
constellation_psk_swigregister = _packetizr_swig.constellation_psk_swigregister
constellation_psk_swigregister(constellation_psk)

def constellation_psk_make(constell, pre_diff_code, n_sectors):
    """constellation_psk_make(pmt_vector_cfloat constell, std::vector< int,std::allocator< int > > pre_diff_code, unsigned int n_sectors) -> gr::digital::constellation_psk::sptr"""
    return _packetizr_swig.constellation_psk_make(constell, pre_diff_code, n_sectors)

class constellation_bpsk(constellation):
    """Proxy of C++ gr::digital::constellation_bpsk class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make():
        """make() -> gr::digital::constellation_bpsk::sptr"""
        return _packetizr_swig.constellation_bpsk_make()

    make = staticmethod(make)
    __swig_destroy__ = _packetizr_swig.delete_constellation_bpsk
    __del__ = lambda self: None
constellation_bpsk_swigregister = _packetizr_swig.constellation_bpsk_swigregister
constellation_bpsk_swigregister(constellation_bpsk)

def constellation_bpsk_make():
    """constellation_bpsk_make() -> gr::digital::constellation_bpsk::sptr"""
    return _packetizr_swig.constellation_bpsk_make()

class constellation_qpsk(constellation):
    """Proxy of C++ gr::digital::constellation_qpsk class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make():
        """make() -> gr::digital::constellation_qpsk::sptr"""
        return _packetizr_swig.constellation_qpsk_make()

    make = staticmethod(make)
    __swig_destroy__ = _packetizr_swig.delete_constellation_qpsk
    __del__ = lambda self: None
constellation_qpsk_swigregister = _packetizr_swig.constellation_qpsk_swigregister
constellation_qpsk_swigregister(constellation_qpsk)

def constellation_qpsk_make():
    """constellation_qpsk_make() -> gr::digital::constellation_qpsk::sptr"""
    return _packetizr_swig.constellation_qpsk_make()

class constellation_dqpsk(constellation):
    """Proxy of C++ gr::digital::constellation_dqpsk class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make():
        """make() -> gr::digital::constellation_dqpsk::sptr"""
        return _packetizr_swig.constellation_dqpsk_make()

    make = staticmethod(make)
    __swig_destroy__ = _packetizr_swig.delete_constellation_dqpsk
    __del__ = lambda self: None
constellation_dqpsk_swigregister = _packetizr_swig.constellation_dqpsk_swigregister
constellation_dqpsk_swigregister(constellation_dqpsk)

def constellation_dqpsk_make():
    """constellation_dqpsk_make() -> gr::digital::constellation_dqpsk::sptr"""
    return _packetizr_swig.constellation_dqpsk_make()

class constellation_8psk(constellation):
    """Proxy of C++ gr::digital::constellation_8psk class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make():
        """make() -> gr::digital::constellation_8psk::sptr"""
        return _packetizr_swig.constellation_8psk_make()

    make = staticmethod(make)
    __swig_destroy__ = _packetizr_swig.delete_constellation_8psk
    __del__ = lambda self: None
constellation_8psk_swigregister = _packetizr_swig.constellation_8psk_swigregister
constellation_8psk_swigregister(constellation_8psk)

def constellation_8psk_make():
    """constellation_8psk_make() -> gr::digital::constellation_8psk::sptr"""
    return _packetizr_swig.constellation_8psk_make()

class constellation_8psk_natural(constellation):
    """Proxy of C++ gr::digital::constellation_8psk_natural class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make():
        """make() -> gr::digital::constellation_8psk_natural::sptr"""
        return _packetizr_swig.constellation_8psk_natural_make()

    make = staticmethod(make)
    __swig_destroy__ = _packetizr_swig.delete_constellation_8psk_natural
    __del__ = lambda self: None
constellation_8psk_natural_swigregister = _packetizr_swig.constellation_8psk_natural_swigregister
constellation_8psk_natural_swigregister(constellation_8psk_natural)

def constellation_8psk_natural_make():
    """constellation_8psk_natural_make() -> gr::digital::constellation_8psk_natural::sptr"""
    return _packetizr_swig.constellation_8psk_natural_make()

class constellation_16qam(constellation):
    """Proxy of C++ gr::digital::constellation_16qam class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make():
        """make() -> gr::digital::constellation_16qam::sptr"""
        return _packetizr_swig.constellation_16qam_make()

    make = staticmethod(make)
    __swig_destroy__ = _packetizr_swig.delete_constellation_16qam
    __del__ = lambda self: None
constellation_16qam_swigregister = _packetizr_swig.constellation_16qam_swigregister
constellation_16qam_swigregister(constellation_16qam)

def constellation_16qam_make():
    """constellation_16qam_make() -> gr::digital::constellation_16qam::sptr"""
    return _packetizr_swig.constellation_16qam_make()

class firdes(object):
    """Proxy of C++ gr::filter::firdes class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    WIN_NONE = _packetizr_swig.firdes_WIN_NONE
    WIN_HAMMING = _packetizr_swig.firdes_WIN_HAMMING
    WIN_HANN = _packetizr_swig.firdes_WIN_HANN
    WIN_BLACKMAN = _packetizr_swig.firdes_WIN_BLACKMAN
    WIN_RECTANGULAR = _packetizr_swig.firdes_WIN_RECTANGULAR
    WIN_KAISER = _packetizr_swig.firdes_WIN_KAISER
    WIN_BLACKMAN_hARRIS = _packetizr_swig.firdes_WIN_BLACKMAN_hARRIS
    WIN_BLACKMAN_HARRIS = _packetizr_swig.firdes_WIN_BLACKMAN_HARRIS
    WIN_BARTLETT = _packetizr_swig.firdes_WIN_BARTLETT
    WIN_FLATTOP = _packetizr_swig.firdes_WIN_FLATTOP

    def window(type, ntaps, beta):
        """window(gr::filter::firdes::win_type type, int ntaps, double beta) -> pmt_vector_float"""
        return _packetizr_swig.firdes_window(type, ntaps, beta)

    window = staticmethod(window)

    def low_pass(*args, **kwargs):
        """low_pass(double gain, double sampling_freq, double cutoff_freq, double transition_width, gr::filter::firdes::win_type window, double beta=6.76) -> pmt_vector_float"""
        return _packetizr_swig.firdes_low_pass(*args, **kwargs)

    low_pass = staticmethod(low_pass)

    def low_pass_2(*args, **kwargs):
        """low_pass_2(double gain, double sampling_freq, double cutoff_freq, double transition_width, double attenuation_dB, gr::filter::firdes::win_type window, double beta=6.76) -> pmt_vector_float"""
        return _packetizr_swig.firdes_low_pass_2(*args, **kwargs)

    low_pass_2 = staticmethod(low_pass_2)

    def high_pass(*args, **kwargs):
        """high_pass(double gain, double sampling_freq, double cutoff_freq, double transition_width, gr::filter::firdes::win_type window, double beta=6.76) -> pmt_vector_float"""
        return _packetizr_swig.firdes_high_pass(*args, **kwargs)

    high_pass = staticmethod(high_pass)

    def high_pass_2(*args, **kwargs):
        """high_pass_2(double gain, double sampling_freq, double cutoff_freq, double transition_width, double attenuation_dB, gr::filter::firdes::win_type window, double beta=6.76) -> pmt_vector_float"""
        return _packetizr_swig.firdes_high_pass_2(*args, **kwargs)

    high_pass_2 = staticmethod(high_pass_2)

    def band_pass(*args, **kwargs):
        """band_pass(double gain, double sampling_freq, double low_cutoff_freq, double high_cutoff_freq, double transition_width, gr::filter::firdes::win_type window, double beta=6.76) -> pmt_vector_float"""
        return _packetizr_swig.firdes_band_pass(*args, **kwargs)

    band_pass = staticmethod(band_pass)

    def band_pass_2(*args, **kwargs):
        """band_pass_2(double gain, double sampling_freq, double low_cutoff_freq, double high_cutoff_freq, double transition_width, double attenuation_dB, gr::filter::firdes::win_type window, double beta=6.76) -> pmt_vector_float"""
        return _packetizr_swig.firdes_band_pass_2(*args, **kwargs)

    band_pass_2 = staticmethod(band_pass_2)

    def complex_band_pass(*args, **kwargs):
        """complex_band_pass(double gain, double sampling_freq, double low_cutoff_freq, double high_cutoff_freq, double transition_width, gr::filter::firdes::win_type window, double beta=6.76) -> pmt_vector_cfloat"""
        return _packetizr_swig.firdes_complex_band_pass(*args, **kwargs)

    complex_band_pass = staticmethod(complex_band_pass)

    def complex_band_pass_2(*args, **kwargs):
        """complex_band_pass_2(double gain, double sampling_freq, double low_cutoff_freq, double high_cutoff_freq, double transition_width, double attenuation_dB, gr::filter::firdes::win_type window, double beta=6.76) -> pmt_vector_cfloat"""
        return _packetizr_swig.firdes_complex_band_pass_2(*args, **kwargs)

    complex_band_pass_2 = staticmethod(complex_band_pass_2)

    def band_reject(*args, **kwargs):
        """band_reject(double gain, double sampling_freq, double low_cutoff_freq, double high_cutoff_freq, double transition_width, gr::filter::firdes::win_type window, double beta=6.76) -> pmt_vector_float"""
        return _packetizr_swig.firdes_band_reject(*args, **kwargs)

    band_reject = staticmethod(band_reject)

    def band_reject_2(*args, **kwargs):
        """band_reject_2(double gain, double sampling_freq, double low_cutoff_freq, double high_cutoff_freq, double transition_width, double attenuation_dB, gr::filter::firdes::win_type window, double beta=6.76) -> pmt_vector_float"""
        return _packetizr_swig.firdes_band_reject_2(*args, **kwargs)

    band_reject_2 = staticmethod(band_reject_2)

    def hilbert(*args, **kwargs):
        """hilbert(unsigned int ntaps=19, gr::filter::firdes::win_type windowtype, double beta=6.76) -> pmt_vector_float"""
        return _packetizr_swig.firdes_hilbert(*args, **kwargs)

    hilbert = staticmethod(hilbert)

    def root_raised_cosine(gain, sampling_freq, symbol_rate, alpha, ntaps):
        """root_raised_cosine(double gain, double sampling_freq, double symbol_rate, double alpha, int ntaps) -> pmt_vector_float"""
        return _packetizr_swig.firdes_root_raised_cosine(gain, sampling_freq, symbol_rate, alpha, ntaps)

    root_raised_cosine = staticmethod(root_raised_cosine)

    def gaussian(gain, spb, bt, ntaps):
        """gaussian(double gain, double spb, double bt, int ntaps) -> pmt_vector_float"""
        return _packetizr_swig.firdes_gaussian(gain, spb, bt, ntaps)

    gaussian = staticmethod(gaussian)

    def __init__(self):
        """__init__(gr::filter::firdes self) -> firdes"""
        this = _packetizr_swig.new_firdes()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _packetizr_swig.delete_firdes
    __del__ = lambda self: None
firdes_swigregister = _packetizr_swig.firdes_swigregister
firdes_swigregister(firdes)

def firdes_window(type, ntaps, beta):
    """firdes_window(gr::filter::firdes::win_type type, int ntaps, double beta) -> pmt_vector_float"""
    return _packetizr_swig.firdes_window(type, ntaps, beta)

def firdes_low_pass(*args, **kwargs):
    """firdes_low_pass(double gain, double sampling_freq, double cutoff_freq, double transition_width, gr::filter::firdes::win_type window, double beta=6.76) -> pmt_vector_float"""
    return _packetizr_swig.firdes_low_pass(*args, **kwargs)

def firdes_low_pass_2(*args, **kwargs):
    """firdes_low_pass_2(double gain, double sampling_freq, double cutoff_freq, double transition_width, double attenuation_dB, gr::filter::firdes::win_type window, double beta=6.76) -> pmt_vector_float"""
    return _packetizr_swig.firdes_low_pass_2(*args, **kwargs)

def firdes_high_pass(*args, **kwargs):
    """firdes_high_pass(double gain, double sampling_freq, double cutoff_freq, double transition_width, gr::filter::firdes::win_type window, double beta=6.76) -> pmt_vector_float"""
    return _packetizr_swig.firdes_high_pass(*args, **kwargs)

def firdes_high_pass_2(*args, **kwargs):
    """firdes_high_pass_2(double gain, double sampling_freq, double cutoff_freq, double transition_width, double attenuation_dB, gr::filter::firdes::win_type window, double beta=6.76) -> pmt_vector_float"""
    return _packetizr_swig.firdes_high_pass_2(*args, **kwargs)

def firdes_band_pass(*args, **kwargs):
    """firdes_band_pass(double gain, double sampling_freq, double low_cutoff_freq, double high_cutoff_freq, double transition_width, gr::filter::firdes::win_type window, double beta=6.76) -> pmt_vector_float"""
    return _packetizr_swig.firdes_band_pass(*args, **kwargs)

def firdes_band_pass_2(*args, **kwargs):
    """firdes_band_pass_2(double gain, double sampling_freq, double low_cutoff_freq, double high_cutoff_freq, double transition_width, double attenuation_dB, gr::filter::firdes::win_type window, double beta=6.76) -> pmt_vector_float"""
    return _packetizr_swig.firdes_band_pass_2(*args, **kwargs)

def firdes_complex_band_pass(*args, **kwargs):
    """firdes_complex_band_pass(double gain, double sampling_freq, double low_cutoff_freq, double high_cutoff_freq, double transition_width, gr::filter::firdes::win_type window, double beta=6.76) -> pmt_vector_cfloat"""
    return _packetizr_swig.firdes_complex_band_pass(*args, **kwargs)

def firdes_complex_band_pass_2(*args, **kwargs):
    """firdes_complex_band_pass_2(double gain, double sampling_freq, double low_cutoff_freq, double high_cutoff_freq, double transition_width, double attenuation_dB, gr::filter::firdes::win_type window, double beta=6.76) -> pmt_vector_cfloat"""
    return _packetizr_swig.firdes_complex_band_pass_2(*args, **kwargs)

def firdes_band_reject(*args, **kwargs):
    """firdes_band_reject(double gain, double sampling_freq, double low_cutoff_freq, double high_cutoff_freq, double transition_width, gr::filter::firdes::win_type window, double beta=6.76) -> pmt_vector_float"""
    return _packetizr_swig.firdes_band_reject(*args, **kwargs)

def firdes_band_reject_2(*args, **kwargs):
    """firdes_band_reject_2(double gain, double sampling_freq, double low_cutoff_freq, double high_cutoff_freq, double transition_width, double attenuation_dB, gr::filter::firdes::win_type window, double beta=6.76) -> pmt_vector_float"""
    return _packetizr_swig.firdes_band_reject_2(*args, **kwargs)

def firdes_hilbert(*args, **kwargs):
    """firdes_hilbert(unsigned int ntaps=19, gr::filter::firdes::win_type windowtype, double beta=6.76) -> pmt_vector_float"""
    return _packetizr_swig.firdes_hilbert(*args, **kwargs)

def firdes_root_raised_cosine(gain, sampling_freq, symbol_rate, alpha, ntaps):
    """firdes_root_raised_cosine(double gain, double sampling_freq, double symbol_rate, double alpha, int ntaps) -> pmt_vector_float"""
    return _packetizr_swig.firdes_root_raised_cosine(gain, sampling_freq, symbol_rate, alpha, ntaps)

def firdes_gaussian(gain, spb, bt, ntaps):
    """firdes_gaussian(double gain, double spb, double bt, int ntaps) -> pmt_vector_float"""
    return _packetizr_swig.firdes_gaussian(gain, spb, bt, ntaps)

class pfb_arb_resampler_ccf(object):
    """Proxy of C++ gr::filter::kernel::pfb_arb_resampler_ccf class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, rate, taps, filter_size):
        """__init__(gr::filter::kernel::pfb_arb_resampler_ccf self, float rate, pmt_vector_float taps, unsigned int filter_size) -> pfb_arb_resampler_ccf"""
        this = _packetizr_swig.new_pfb_arb_resampler_ccf(rate, taps, filter_size)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _packetizr_swig.delete_pfb_arb_resampler_ccf
    __del__ = lambda self: None

    def set_taps(self, taps):
        """set_taps(pfb_arb_resampler_ccf self, pmt_vector_float taps)"""
        return _packetizr_swig.pfb_arb_resampler_ccf_set_taps(self, taps)


    def taps(self):
        """taps(pfb_arb_resampler_ccf self) -> std::vector< std::vector< float,std::allocator< float > >,std::allocator< std::vector< float,std::allocator< float > > > >"""
        return _packetizr_swig.pfb_arb_resampler_ccf_taps(self)


    def print_taps(self):
        """print_taps(pfb_arb_resampler_ccf self)"""
        return _packetizr_swig.pfb_arb_resampler_ccf_print_taps(self)


    def set_rate(self, rate):
        """set_rate(pfb_arb_resampler_ccf self, float rate)"""
        return _packetizr_swig.pfb_arb_resampler_ccf_set_rate(self, rate)


    def set_phase(self, ph):
        """set_phase(pfb_arb_resampler_ccf self, float ph)"""
        return _packetizr_swig.pfb_arb_resampler_ccf_set_phase(self, ph)


    def phase(self):
        """phase(pfb_arb_resampler_ccf self) -> float"""
        return _packetizr_swig.pfb_arb_resampler_ccf_phase(self)


    def taps_per_filter(self):
        """taps_per_filter(pfb_arb_resampler_ccf self) -> unsigned int"""
        return _packetizr_swig.pfb_arb_resampler_ccf_taps_per_filter(self)


    def interpolation_rate(self):
        """interpolation_rate(pfb_arb_resampler_ccf self) -> unsigned int"""
        return _packetizr_swig.pfb_arb_resampler_ccf_interpolation_rate(self)


    def decimation_rate(self):
        """decimation_rate(pfb_arb_resampler_ccf self) -> unsigned int"""
        return _packetizr_swig.pfb_arb_resampler_ccf_decimation_rate(self)


    def fractional_rate(self):
        """fractional_rate(pfb_arb_resampler_ccf self) -> float"""
        return _packetizr_swig.pfb_arb_resampler_ccf_fractional_rate(self)


    def group_delay(self):
        """group_delay(pfb_arb_resampler_ccf self) -> int"""
        return _packetizr_swig.pfb_arb_resampler_ccf_group_delay(self)


    def phase_offset(self, freq, fs):
        """phase_offset(pfb_arb_resampler_ccf self, float freq, float fs) -> float"""
        return _packetizr_swig.pfb_arb_resampler_ccf_phase_offset(self, freq, fs)


    def filter(self, output, input, n_to_read, n_read):
        """filter(pfb_arb_resampler_ccf self, gr_complex * output, gr_complex * input, int n_to_read, int & n_read) -> int"""
        return _packetizr_swig.pfb_arb_resampler_ccf_filter(self, output, input, n_to_read, n_read)

pfb_arb_resampler_ccf_swigregister = _packetizr_swig.pfb_arb_resampler_ccf_swigregister
pfb_arb_resampler_ccf_swigregister(pfb_arb_resampler_ccf)

class pfb_arb_resampler_ccc(object):
    """Proxy of C++ gr::filter::kernel::pfb_arb_resampler_ccc class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, rate, taps, filter_size):
        """__init__(gr::filter::kernel::pfb_arb_resampler_ccc self, float rate, pmt_vector_cfloat taps, unsigned int filter_size) -> pfb_arb_resampler_ccc"""
        this = _packetizr_swig.new_pfb_arb_resampler_ccc(rate, taps, filter_size)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _packetizr_swig.delete_pfb_arb_resampler_ccc
    __del__ = lambda self: None

    def set_taps(self, taps):
        """set_taps(pfb_arb_resampler_ccc self, pmt_vector_cfloat taps)"""
        return _packetizr_swig.pfb_arb_resampler_ccc_set_taps(self, taps)


    def taps(self):
        """taps(pfb_arb_resampler_ccc self) -> gr_vector_vector_complexf"""
        return _packetizr_swig.pfb_arb_resampler_ccc_taps(self)


    def print_taps(self):
        """print_taps(pfb_arb_resampler_ccc self)"""
        return _packetizr_swig.pfb_arb_resampler_ccc_print_taps(self)


    def set_rate(self, rate):
        """set_rate(pfb_arb_resampler_ccc self, float rate)"""
        return _packetizr_swig.pfb_arb_resampler_ccc_set_rate(self, rate)


    def set_phase(self, ph):
        """set_phase(pfb_arb_resampler_ccc self, float ph)"""
        return _packetizr_swig.pfb_arb_resampler_ccc_set_phase(self, ph)


    def phase(self):
        """phase(pfb_arb_resampler_ccc self) -> float"""
        return _packetizr_swig.pfb_arb_resampler_ccc_phase(self)


    def taps_per_filter(self):
        """taps_per_filter(pfb_arb_resampler_ccc self) -> unsigned int"""
        return _packetizr_swig.pfb_arb_resampler_ccc_taps_per_filter(self)


    def interpolation_rate(self):
        """interpolation_rate(pfb_arb_resampler_ccc self) -> unsigned int"""
        return _packetizr_swig.pfb_arb_resampler_ccc_interpolation_rate(self)


    def decimation_rate(self):
        """decimation_rate(pfb_arb_resampler_ccc self) -> unsigned int"""
        return _packetizr_swig.pfb_arb_resampler_ccc_decimation_rate(self)


    def fractional_rate(self):
        """fractional_rate(pfb_arb_resampler_ccc self) -> float"""
        return _packetizr_swig.pfb_arb_resampler_ccc_fractional_rate(self)


    def group_delay(self):
        """group_delay(pfb_arb_resampler_ccc self) -> int"""
        return _packetizr_swig.pfb_arb_resampler_ccc_group_delay(self)


    def phase_offset(self, freq, fs):
        """phase_offset(pfb_arb_resampler_ccc self, float freq, float fs) -> float"""
        return _packetizr_swig.pfb_arb_resampler_ccc_phase_offset(self, freq, fs)


    def filter(self, output, input, n_to_read, n_read):
        """filter(pfb_arb_resampler_ccc self, gr_complex * output, gr_complex * input, int n_to_read, int & n_read) -> int"""
        return _packetizr_swig.pfb_arb_resampler_ccc_filter(self, output, input, n_to_read, n_read)

pfb_arb_resampler_ccc_swigregister = _packetizr_swig.pfb_arb_resampler_ccc_swigregister
pfb_arb_resampler_ccc_swigregister(pfb_arb_resampler_ccc)

class pfb_arb_resampler_fff(object):
    """Proxy of C++ gr::filter::kernel::pfb_arb_resampler_fff class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, rate, taps, filter_size):
        """__init__(gr::filter::kernel::pfb_arb_resampler_fff self, float rate, pmt_vector_float taps, unsigned int filter_size) -> pfb_arb_resampler_fff"""
        this = _packetizr_swig.new_pfb_arb_resampler_fff(rate, taps, filter_size)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _packetizr_swig.delete_pfb_arb_resampler_fff
    __del__ = lambda self: None

    def set_taps(self, taps):
        """set_taps(pfb_arb_resampler_fff self, pmt_vector_float taps)"""
        return _packetizr_swig.pfb_arb_resampler_fff_set_taps(self, taps)


    def taps(self):
        """taps(pfb_arb_resampler_fff self) -> std::vector< std::vector< float,std::allocator< float > >,std::allocator< std::vector< float,std::allocator< float > > > >"""
        return _packetizr_swig.pfb_arb_resampler_fff_taps(self)


    def print_taps(self):
        """print_taps(pfb_arb_resampler_fff self)"""
        return _packetizr_swig.pfb_arb_resampler_fff_print_taps(self)


    def set_rate(self, rate):
        """set_rate(pfb_arb_resampler_fff self, float rate)"""
        return _packetizr_swig.pfb_arb_resampler_fff_set_rate(self, rate)


    def set_phase(self, ph):
        """set_phase(pfb_arb_resampler_fff self, float ph)"""
        return _packetizr_swig.pfb_arb_resampler_fff_set_phase(self, ph)


    def phase(self):
        """phase(pfb_arb_resampler_fff self) -> float"""
        return _packetizr_swig.pfb_arb_resampler_fff_phase(self)


    def taps_per_filter(self):
        """taps_per_filter(pfb_arb_resampler_fff self) -> unsigned int"""
        return _packetizr_swig.pfb_arb_resampler_fff_taps_per_filter(self)


    def interpolation_rate(self):
        """interpolation_rate(pfb_arb_resampler_fff self) -> unsigned int"""
        return _packetizr_swig.pfb_arb_resampler_fff_interpolation_rate(self)


    def decimation_rate(self):
        """decimation_rate(pfb_arb_resampler_fff self) -> unsigned int"""
        return _packetizr_swig.pfb_arb_resampler_fff_decimation_rate(self)


    def fractional_rate(self):
        """fractional_rate(pfb_arb_resampler_fff self) -> float"""
        return _packetizr_swig.pfb_arb_resampler_fff_fractional_rate(self)


    def group_delay(self):
        """group_delay(pfb_arb_resampler_fff self) -> int"""
        return _packetizr_swig.pfb_arb_resampler_fff_group_delay(self)


    def phase_offset(self, freq, fs):
        """phase_offset(pfb_arb_resampler_fff self, float freq, float fs) -> float"""
        return _packetizr_swig.pfb_arb_resampler_fff_phase_offset(self, freq, fs)


    def filter(self, output, input, n_to_read, n_read):
        """filter(pfb_arb_resampler_fff self, float * output, float * input, int n_to_read, int & n_read) -> int"""
        return _packetizr_swig.pfb_arb_resampler_fff_filter(self, output, input, n_to_read, n_read)

pfb_arb_resampler_fff_swigregister = _packetizr_swig.pfb_arb_resampler_fff_swigregister
pfb_arb_resampler_fff_swigregister(pfb_arb_resampler_fff)

class packet_encoder_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::packetizr::packet_encoder)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::packetizr::packet_encoder)> self) -> packet_encoder_sptr
        __init__(boost::shared_ptr<(gr::packetizr::packet_encoder)> self, packet_encoder p) -> packet_encoder_sptr
        """
        this = _packetizr_swig.new_packet_encoder_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(packet_encoder_sptr self) -> packet_encoder"""
        return _packetizr_swig.packet_encoder_sptr___deref__(self)

    __swig_destroy__ = _packetizr_swig.delete_packet_encoder_sptr
    __del__ = lambda self: None

    def make(self, sps, preamble, header_constel, payload_constel, itemsize, lengthtagname):
        """
        make(packet_encoder_sptr self, unsigned int sps, std::vector< int,std::allocator< int > > const preamble, gr::digital::constellation_sptr header_constel, gr::digital::constellation_sptr payload_constel, size_t itemsize, std::string const & lengthtagname) -> packet_encoder_sptr

        Return a shared_ptr to a new instance of packetizr::packet_encoder.

        To avoid accidental use of raw pointers, packetizr::packet_encoder's constructor is in a private implementation class. packetizr::packet_encoder::make is the public interface for creating new instances.

        Params: (sps, preamble, header_constel, payload_constel, itemsize, lengthtagname)
        """
        return _packetizr_swig.packet_encoder_sptr_make(self, sps, preamble, header_constel, payload_constel, itemsize, lengthtagname)


    def history(self):
        """history(packet_encoder_sptr self) -> unsigned int"""
        return _packetizr_swig.packet_encoder_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(packet_encoder_sptr self, int which, int delay)
        declare_sample_delay(packet_encoder_sptr self, unsigned int delay)
        """
        return _packetizr_swig.packet_encoder_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(packet_encoder_sptr self, int which) -> unsigned int"""
        return _packetizr_swig.packet_encoder_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(packet_encoder_sptr self) -> int"""
        return _packetizr_swig.packet_encoder_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(packet_encoder_sptr self) -> double"""
        return _packetizr_swig.packet_encoder_sptr_relative_rate(self)


    def start(self):
        """start(packet_encoder_sptr self) -> bool"""
        return _packetizr_swig.packet_encoder_sptr_start(self)


    def stop(self):
        """stop(packet_encoder_sptr self) -> bool"""
        return _packetizr_swig.packet_encoder_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(packet_encoder_sptr self, unsigned int which_input) -> uint64_t"""
        return _packetizr_swig.packet_encoder_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(packet_encoder_sptr self, unsigned int which_output) -> uint64_t"""
        return _packetizr_swig.packet_encoder_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(packet_encoder_sptr self) -> int"""
        return _packetizr_swig.packet_encoder_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(packet_encoder_sptr self, int m)"""
        return _packetizr_swig.packet_encoder_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(packet_encoder_sptr self)"""
        return _packetizr_swig.packet_encoder_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(packet_encoder_sptr self) -> bool"""
        return _packetizr_swig.packet_encoder_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(packet_encoder_sptr self, int m)"""
        return _packetizr_swig.packet_encoder_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(packet_encoder_sptr self) -> int"""
        return _packetizr_swig.packet_encoder_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(packet_encoder_sptr self, int i) -> long"""
        return _packetizr_swig.packet_encoder_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(packet_encoder_sptr self, long max_output_buffer)
        set_max_output_buffer(packet_encoder_sptr self, int port, long max_output_buffer)
        """
        return _packetizr_swig.packet_encoder_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(packet_encoder_sptr self, int i) -> long"""
        return _packetizr_swig.packet_encoder_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(packet_encoder_sptr self, long min_output_buffer)
        set_min_output_buffer(packet_encoder_sptr self, int port, long min_output_buffer)
        """
        return _packetizr_swig.packet_encoder_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(packet_encoder_sptr self) -> float"""
        return _packetizr_swig.packet_encoder_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(packet_encoder_sptr self) -> float"""
        return _packetizr_swig.packet_encoder_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(packet_encoder_sptr self) -> float"""
        return _packetizr_swig.packet_encoder_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(packet_encoder_sptr self) -> float"""
        return _packetizr_swig.packet_encoder_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(packet_encoder_sptr self) -> float"""
        return _packetizr_swig.packet_encoder_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(packet_encoder_sptr self) -> float"""
        return _packetizr_swig.packet_encoder_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(packet_encoder_sptr self, int which) -> float
        pc_input_buffers_full(packet_encoder_sptr self) -> pmt_vector_float
        """
        return _packetizr_swig.packet_encoder_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(packet_encoder_sptr self, int which) -> float
        pc_input_buffers_full_avg(packet_encoder_sptr self) -> pmt_vector_float
        """
        return _packetizr_swig.packet_encoder_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(packet_encoder_sptr self, int which) -> float
        pc_input_buffers_full_var(packet_encoder_sptr self) -> pmt_vector_float
        """
        return _packetizr_swig.packet_encoder_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(packet_encoder_sptr self, int which) -> float
        pc_output_buffers_full(packet_encoder_sptr self) -> pmt_vector_float
        """
        return _packetizr_swig.packet_encoder_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(packet_encoder_sptr self, int which) -> float
        pc_output_buffers_full_avg(packet_encoder_sptr self) -> pmt_vector_float
        """
        return _packetizr_swig.packet_encoder_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(packet_encoder_sptr self, int which) -> float
        pc_output_buffers_full_var(packet_encoder_sptr self) -> pmt_vector_float
        """
        return _packetizr_swig.packet_encoder_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(packet_encoder_sptr self) -> float"""
        return _packetizr_swig.packet_encoder_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(packet_encoder_sptr self) -> float"""
        return _packetizr_swig.packet_encoder_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(packet_encoder_sptr self) -> float"""
        return _packetizr_swig.packet_encoder_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(packet_encoder_sptr self) -> float"""
        return _packetizr_swig.packet_encoder_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(packet_encoder_sptr self) -> float"""
        return _packetizr_swig.packet_encoder_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(packet_encoder_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _packetizr_swig.packet_encoder_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(packet_encoder_sptr self)"""
        return _packetizr_swig.packet_encoder_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(packet_encoder_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _packetizr_swig.packet_encoder_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(packet_encoder_sptr self) -> int"""
        return _packetizr_swig.packet_encoder_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(packet_encoder_sptr self) -> int"""
        return _packetizr_swig.packet_encoder_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(packet_encoder_sptr self, int priority) -> int"""
        return _packetizr_swig.packet_encoder_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(packet_encoder_sptr self) -> std::string"""
        return _packetizr_swig.packet_encoder_sptr_name(self)


    def symbol_name(self):
        """symbol_name(packet_encoder_sptr self) -> std::string"""
        return _packetizr_swig.packet_encoder_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(packet_encoder_sptr self) -> io_signature_sptr"""
        return _packetizr_swig.packet_encoder_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(packet_encoder_sptr self) -> io_signature_sptr"""
        return _packetizr_swig.packet_encoder_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(packet_encoder_sptr self) -> long"""
        return _packetizr_swig.packet_encoder_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(packet_encoder_sptr self) -> basic_block_sptr"""
        return _packetizr_swig.packet_encoder_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(packet_encoder_sptr self, int ninputs, int noutputs) -> bool"""
        return _packetizr_swig.packet_encoder_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(packet_encoder_sptr self) -> std::string"""
        return _packetizr_swig.packet_encoder_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(packet_encoder_sptr self, std::string name)"""
        return _packetizr_swig.packet_encoder_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(packet_encoder_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _packetizr_swig.packet_encoder_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(packet_encoder_sptr self) -> swig_int_ptr"""
        return _packetizr_swig.packet_encoder_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(packet_encoder_sptr self) -> swig_int_ptr"""
        return _packetizr_swig.packet_encoder_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(packet_encoder_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _packetizr_swig.packet_encoder_sptr_message_subscribers(self, which_port)

packet_encoder_sptr_swigregister = _packetizr_swig.packet_encoder_sptr_swigregister
packet_encoder_sptr_swigregister(packet_encoder_sptr)


packet_encoder_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
packet_encoder = packet_encoder.make;



