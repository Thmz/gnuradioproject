/* -*- c++ -*- */
/* 
 * Copyright 2017 <+YOU OR YOUR COMPANY+>.
 * 
 * This is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3, or (at your option)
 * any later version.
 * 
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this software; see the file COPYING.  If not, write to
 * the Free Software Foundation, Inc., 51 Franklin Street,
 * Boston, MA 02110-1301, USA.
 */


#ifndef INCLUDED_PACKETIZER_PACKET_ENCODER_H
#define INCLUDED_PACKETIZER_PACKET_ENCODER_H

#include <packetizer/api.h>
#include <gnuradio/digital/api.h>
#include <gnuradio/tagged_stream_block.h>
#include <gnuradio/digital/constellation.h>
#include <gnuradio/digital/packet_header_default.h>
#include <gnuradio/block.h>

namespace gr {
  namespace packetizer {

    /*!
     * \brief Packet Encoder
     * \ingroup packetizer
     *
     * \details
     * This block creates packets from an incoming data stream.
     * The packets have the format preamble, header, payload. 
     * The preamble is given as a sequence of preamble constellations (for example, -1 and 1 for BPSK)
     * The data of the header is generated by the header formatter. 
     * The header will be mapped to symbols using the given constellations.
     * The data will be mapped to symbols using the given constellations.
     */
    class PACKETIZER_API packet_encoder : virtual public gr::tagged_stream_block
    {
     public:
      typedef boost::shared_ptr<packet_encoder> sptr;

      /*!
       * \param preamble Sequence of modulated preamble symbols (BPSK: -1 and 1)
       * \param constel_header Constellation for header
       * \param constel_payload Constellation for payload
       * \param header_formatter Header formatter
       * \param lengthtagname Name of tag that indicates the start of the paylaod data and the length
       * \param itemsize Not used yet. Input is always bytes, output is always complex symbols
       */
      static sptr make(
        const std::vector<int> preamble, 
        const gr::digital::constellation_sptr constel_header, 
        const gr::digital::constellation_sptr constel_payload, 
        const gr::digital::packet_header_default::sptr &header_formatter, 
        const std::string &lengthtagname = "packet_len", 
        const int zero_padding = 0,
        const bool whiten = 0,
        const size_t itemsize = 1
        );


    };

  } // namespace packetizer
} // namespace gr

#endif /* INCLUDED_packetizer_PACKET_ENCODER_H */

